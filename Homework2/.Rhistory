glm.auc$auc[2]
glm.auc$auc[1]
glmRoc
glmRoc.auc[1]
glmRoc.auc
glmRoc
glmRoc$auc
# Compute specificity
glm.spec <- specificity(table(glm.pred, test_df$breast))
knn.spec <- specificity(table(augmented$.pred_class, test_df$breast))
naive.spec <- specificity(table(pred.final,test_df$breast))
# Compute sensitivity
glm.sens <- sensitivity(table(glm.pred, test_df$breast))
knn.sens <- sensitivity(table(augmented$.pred_class, test_df$breast))
naive.sens <- sensitivity(table(pred.final,test_df$breast))
# Compute ROC
glm.roc = roc(test_df$breast ~ glm.probs[,2])
knn.roc = roc(test_df$breast ~ augmented$.pred_Breast)
bay.roc = roc(test_df$breast ~ naive.pred[,2])
df_comparison <- data.frame(GLM = c(glm.acc, glm.spec, glm.sens,glm.roc$auc[1]),  KNN = c(knn.acc$.estimate, knn.spec, knn.sens), NAIVE = c(naive.acc, naive.spec, naive.sens))
# Compute specificity
glm.spec <- specificity(table(glm.pred, test_df$breast))
knn.spec <- specificity(table(augmented$.pred_class, test_df$breast))
naive.spec <- specificity(table(pred.final,test_df$breast))
# Compute sensitivity
glm.sens <- sensitivity(table(glm.pred, test_df$breast))
knn.sens <- sensitivity(table(augmented$.pred_class, test_df$breast))
naive.sens <- sensitivity(table(pred.final,test_df$breast))
# Compute ROC
glm.roc = roc(test_df$breast ~ glm.probs[,2])
knn.roc = roc(test_df$breast ~ augmented$.pred_Breast)
bay.roc = roc(test_df$breast ~ naive.pred[,2])
df_comparison <- data.frame(GLM = c(glm.acc, glm.spec, glm.sens,glm.roc$auc),  KNN = c(knn.acc$.estimate, knn.spec, knn.sens), NAIVE = c(naive.acc, naive.spec, naive.sens))
# Compute specificity
glm.spec <- specificity(table(glm.pred, test_df$breast))
knn.spec <- specificity(table(augmented$.pred_class, test_df$breast))
naive.spec <- specificity(table(pred.final,test_df$breast))
# Compute sensitivity
glm.sens <- sensitivity(table(glm.pred, test_df$breast))
knn.sens <- sensitivity(table(augmented$.pred_class, test_df$breast))
naive.sens <- sensitivity(table(pred.final,test_df$breast))
# Compute ROC
glm.roc = roc(test_df$breast ~ glm.probs[,2])
knn.roc = roc(test_df$breast ~ augmented$.pred_Breast)
bay.roc = roc(test_df$breast ~ naive.pred[,2])
df_comparison <- data.frame(GLM = c(glm.acc, glm.spec, glm.sens,glm.roc$auc),  KNN = c(knn.acc$.estimate, knn.spec, knn.sens, knn.roc$auc), NAIVE = c(naive.acc, naive.spec, naive.sens, bay.roc$auc))
rownames(df_comparison) <- c("Accuracy","Specificity", "Sensitivity", "AUC")
df_comparison
# Compute specificity
glm.spec <- specificity(table(glm.pred, test_df$breast))
knn.spec <- specificity(table(augmented$.pred_class, test_df$breast))
naive.spec <- specificity(table(pred.final,test_df$breast))
# Compute sensitivity
glm.sens <- sensitivity(table(glm.pred, test_df$breast))
knn.sens <- sensitivity(table(augmented$.pred_class, test_df$breast))
naive.sens <- sensitivity(table(pred.final,test_df$breast))
# Compute ROC
glm.roc = roc(test_df$breast ~ glm.probs[,2])
knn.roc = roc(test_df$breast ~ augmented$.pred_Breast)
bay.roc = roc(test_df$breast ~ naive.pred[,2])
# Compare all the statistics between the models
df_comparison <- data.frame(GLM = c(glm.acc, glm.spec, glm.sens,glm.roc$auc),  KNN = c(knn.acc$.estimate, knn.spec, knn.sens, knn.roc$auc), NAIVE = c(naive.acc, naive.spec, naive.sens, bay.roc$auc))
rownames(df_comparison) <- c("Accuracy","Specificity", "Sensitivity", "AUC")
df_comparison
naive.acc
df_comparison
# BiocManager::install("GEOquery")
# BiocManager::install("oligo")
# BiocManager::install("pd.hg.u133.plus.2")
# BiocManager::install("hgu133plus2.db")
# BiocManager::install("genefilter")
# BiocManager::install("limma")
# BiocManager::install("pheatmap")
library(GEOquery)
# BiocManager::install("GEOquery")
# BiocManager::install("oligo")
# BiocManager::install("pd.hg.u133.plus.2")
# BiocManager::install("hgu133plus2.db")
# BiocManager::install("genefilter")
# BiocManager::install("limma")
# BiocManager::install("pheatmap")
library(GEOquery)
gse <- getGEO("GSE55945",GSEMatrix = T)
class(gse[[1]])
data.matrix.GEO <- exprs(gse[[1]])
boxplot(log2(data.matrix.GEO))
#options(timeout = max(300, getOption("timeout")))
#options(download.file.method.GEOquery = "wget")
file_paths <- getGEOSuppFiles("GSE55945",baseDir = "~/Documents/Bioinformatic_resources/04_Differential_expression")
setwd("~/Documents/Bioinformatic_resources/04_Differential_expression")
system(paste("tar -xvf ",rownames(file_paths)[1],sep=""))
library(oligo)
library("pd.hg.u133.plus.2")
setwd("~/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945")
setwd("~/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
# BiocManager::install("GEOquery")
# BiocManager::install("oligo")
# BiocManager::install("pd.hg.u133.plus.2")
# BiocManager::install("hgu133plus2.db")
# BiocManager::install("genefilter")
# BiocManager::install("limma")
# BiocManager::install("pheatmap")
library(GEOquery)
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
system(paste("tar -xvf ",rownames(file_paths)[1],sep=""))
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/GSE55945_RAW")
library(oligo)
library("pd.hg.u133.plus.2")
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
system(paste("tar -xvf ",rownames(file_paths)[1],sep=""))
library(oligo)
library("pd.hg.u133.plus.2")
celpath <- "~/Documents/Bioinformatic_resources/04_Differential_expression/"
list <- list.files(celpath,full.names=TRUE,pattern = "gz")
data <- read.celfiles(list)
list <- list.files(celpath,full.names=TRUE,pattern = "gz")
data <- read.celfiles(list)
setwd("/Users/annalisaxamin/Documents/Bioinformatic_resources/04_Differential_expression/GSE55945/")
system(paste("tar -xvf ",rownames(file_paths)[1],sep=""))
library(oligo)
library("pd.hg.u133.plus.2")
celpath <- "~/Documents/Bioinformatic_resources/04_Differential_expression/"
list <- list.files(celpath,full.names=TRUE,pattern = "gz")
data <- read.celfiles(list)
celpath <- "~/Documents/Bioinformatic_resources/04_Differential_expression/"
list <- list.files(celpath,full.names=TRUE,pattern = "gz")
#data <- read.celfiles(list) # returns an error because a file is corrupted
list <- list[-grep("GSM1348937_110807_HGU133_PLUS_2.0_MS_36A6.CEL.gz",list)]
data <- read.celfiles(list)
celpath <- "~/Documents/Bioinformatic_resources/04_Differential_expression/"
list <- list.files(celpath,full.names=TRUE,pattern = "gz")
#data <- read.celfiles(list) # returns an error because a file is corrupted
list <- list[-grep("GSM1348937_110807_HGU133_PLUS_2.0_MS_36A6.CEL.gz",list)]
#data <- read.celfiles(list) # i get another error because there is another corrupted file
list <- list[-grep("GSM1348948_011508_HGU133_PLUS_2.0_MS_36D2.CEL.gz",list)]
data <- read.celfiles(list)
data.rma <- rma(data)
pData(data.rma)
fData(data.rma)
image(data[,1],main=pData(data)$index[1])
hist(data[,1],lwd=2,which='pm',ylab='Density',xlab='Log2 intensities',main=pData(data)$index[1])
hist(data[,2],lwd=2,which='pm',ylab='Density',xlab='Log2 intensities',main=pData(data)$index[2])
hist(data[,3],lwd=2,which='pm',ylab='Density',xlab='Log2 intensities',main=pData(data)$index[3])
boxplot(data,which="pm",names=pData(data)$index)
boxplot(data.rma,which="pm",names=pData(data)$index)
boxplot(data,which="pm",names=pData(data)$index)
data.matrix <- exprs(data.rma)
color <- c(rep("red",12),rep("blue",7))
data.PC <- prcomp(t(data.matrix),scale.=TRUE) #compute PCA
plot(data.PC$x[,1:2],xlim=c(-200,200),ylim=c(-200,200),col=color,pch=19) #plot PCA
names <- sapply(rownames(pData(data)),function(x) strsplit(x,"\\_")[[1]][1])
text(data.PC$x[,1],data.PC$x[,2]+10,names,cex=0.7)
data.matrix <- exprs(data.rma)
color <- c(rep("red",12),rep("blue",7))
data.PC <- prcomp(t(data.matrix),scale.=TRUE) # compute PCA
plot(data.PC$x[,1:2],xlim=c(-200,200),ylim=c(-200,200),col=color,pch=21) # plot PCA
names <- sapply(rownames(pData(data)),function(x) strsplit(x,"\\_")[[1]][1])
text(data.PC$x[,1],data.PC$x[,2]+10,names,cex=0.7)
data.matrix <- exprs(data.rma)
color <- c(rep("red",12),rep("blue",7))
data.PC <- prcomp(t(data.matrix),scale.=TRUE) # compute PCA
plot(data.PC$x[,1:2],xlim=c(-200,200),ylim=c(-200,200),col=color,pch=19) # plot PCA
names <- sapply(rownames(pData(data)),function(x) strsplit(x,"\\_")[[1]][1])
text(data.PC$x[,1],data.PC$x[,2]+10,names,cex=0.7)
prbs <- findLargest(featureNames(data.rma), testStat = iqrs, data = "hgu133plus2.db") # returns probes with largest variability for each gene
library(hgu133plus2.db)
library(genefilter)
iqrs <- apply(exprs(data.rma), 1, IQR) # compute interquantile ranges
prbs <- findLargest(featureNames(data.rma), testStat = iqrs, data = "hgu133plus2.db") # returns probes with largest variability for each gene
dim(data.rma)
data.rma <- data.rma[prbs, ]
dim(data.rma)
ann <- AnnotationDbi::select(hgu133plus2.db, keys = featureNames(data.rma), columns = c("ENTREZID", "SYMBOL", "GENENAME"))
rownames(ann) <- ann[,1]
fData(data.rma) <- ann
data.matrix <- exprs(data.rma)
color <- c(rep("red",12),rep("blue",7))
data.PC <- prcomp(t(data.matrix),scale.=TRUE)
plot(data.PC$x[,1:2],xlim=c(-200,200),ylim=c(-200,200),col=color,pch=19)
genes <- fData(data.rma)$SYMBOL
annt <- c(rep("Tumor",12),rep("Normal",7))
pvals <- sapply(genes,function(x)
wilcox.test(data.matrix[which(genes==x),which(annt=="Tumor")],
data.matrix[which(genes==x),which(annt=="Normal")])$p.value)
pvals.adj <- p.adjust(pvals,method = "fdr")
diff.genes <- genes[which(pvals.adj<0.05)]
genes <- fData(data.rma)$SYMBOL
annt <- c(rep("Tumor",12),rep("Normal",7))
pvals <- sapply(genes,function(x)
wilcox.test(data.matrix[which(genes==x),which(annt=="Tumor")],
data.matrix[which(genes==x),which(annt=="Normal")])$p.value)
pvals.adj <- p.adjust(pvals,method = "fdr")
diff.genes <- genes[which(pvals.adj<0.05)]
library(limma)
design <- model.matrix(~0+annt)
colnames(design) <- c("Normal","Tumor")
contr <- makeContrasts(Tumor-Normal,levels=design)
fit <- lmFit(data.matrix,design)
fit.contr <- eBayes(contrasts.fit(fit,contr)) # empirical Bayesian method
etab <- topTable(fit.contr,
number = 1000,
adjust = "BH",
p.value = 0.05,
coef = "Tumor - Normal",genelist=genes)
head(etab)
diff.genes.2 <- etab$ID
data.rma.DEGs <- data.rma[which(fData(data.rma)$SYMBOL%in%diff.genes.2),]
data.matrix.DEGs <- exprs(data.rma.DEGs)
length(diff.genes)
length(diff.genes.2)
length(intersect(diff.genes,diff.genes.2))
head(fit$coefficients)
head(etab)
head(contrasts.fit(fit,contr)$coefficients)
fit.contr
library(limma)
design <- model.matrix(~0+annt) # vector that tells us which sample is Normal and which is Tumor
colnames(design) <- c("Normal","Tumor")
# View(design)
contr <- makeContrasts(Tumor-Normal,levels=design)
fit <- lmFit(data.matrix,design)
# head(fit$coefficients)
# head(contrasts.fit(fit,contr)$coefficients)
fit.contr <- eBayes(contrasts.fit(fit,contr)) # empirical Bayesian method that tells us if the difference is significant or not
etab <- topTable(fit.contr,
number = 1000,
adjust = "BH",
p.value = 0.05,
coef = "Tumor - Normal",genelist=genes) # extract the result of our DE analysis
head(etab)
diff.genes.2 <- etab$ID
data.rma.DEGs <- data.rma[which(fData(data.rma)$SYMBOL%in%diff.genes.2),]
data.matrix.DEGs <- exprs(data.rma.DEGs)
length(diff.genes)
length(diff.genes.2)
length(intersect(diff.genes,diff.genes.2))
etab <- topTable(fit.contr, number = 1000, adjust = "BH", p.value = 0.05, lfc=1, coef = "Tumor - Normal",genelist=genes)
head(etab)
dists <- as.matrix(dist(t(data.matrix.DEGs), method = "euclidean"))
hmcol <- rev(colorRampPalette(RColorBrewer::brewer.pal(9, "YlOrRd"))(255))
annotation_for_heatmap <- data.frame(type = annt)
row.names(annotation_for_heatmap) <- row.names(pData(data.rma.DEGs))
ann_colors <- list(type = c(Tumor = "chartreuse4", Normal = "burlywood3"))
library(pheatmap)
pheatmap(dists, width = 90, col = (hmcol),fontsize_row = 4,annotation_legend = TRUE,
annotation_row = annotation_for_heatmap,
annotation_colors = ann_colors,
legend = FALSE,
treeheight_row = 0,
legend_breaks = c(min(dists, na.rm = TRUE),
max(dists, na.rm = TRUE)),
legend_labels = (c("small", "large")),
main = "Prostate cancer dataset")
cols <- c(rep("chartreuse4",12),rep("burlywood3",7))
pal <- c("blue","white","red")
pal <- colorRampPalette(pal)(100)
heatmap(data.matrix.DEGs,ColSideColors = cols,cexCol = 0.5,margins = c(12,4),col=pal,cexRow = 0.2)
library(ISLR2)
data(heaters)
library(ISLR)
data(heaters)
data(Hitters)
# install.packages("BiocManager")
# BiocManager::install("genefilter")
# BiocManager::install("GEOquery")
# BiocManager::install("pROC")
library("GEOquery")
gse<- getGEO("GSE41526")
length(gse)
gse <- gse[[1]]
show(gse)
ex <- exprs(gse)
ex2 <- (na.omit(ex)+40)
ex3<-ex2[,1:40]
library("genefilter")
f <- factor(c(rep(0,20), rep("1",20))) # define a vector of labels
# or I could have done
# f <- factor(c(rep("control",20), rep("affected",20)))
tt40 <- rowttests(ex3,f)
head(tt40
head(tt40)
head(tt40)
knitr::opts_chunk$set(warning=FALSE,message=FALSE,
tidy.opts=list(width.cutoff = 80),
tidy = TRUE)
# keepers <- which(p.adjust(tt40$p.value)<0.1)
keepers <- which(tt40$p.value<0.1)
length(keepers) # If I have used a smaller threshold, such as 0.5, I would have get a smaller number of genes
tex3 <- t(ex3) # transpose
tex3 <- tex3[,keepers]
dat <- cbind(as.data.frame(tex3),f)
colnames(dat)[ncol(dat)] <- "AFFECTED"
dat
n.controls <- 20
n.affected <- 20
n.controls <- 20
n.affected <- 20
train <- sample(1:(n.controls), (n.controls-5))
test <- setdiff(1:(n.controls),train)
test<- c(test, test+20)
train <- c(train, train+20)
library("MASS")
mod <- lda(AFFECTED ~ ., data=dat, prior = c(0.5,0.5),
subset = train) # stores the coefficients
plot(mod)
mod.values <- predict(mod, dat[train,])
mod.values$class
plot(mod.values$x[,1], ylab=c("LDA Axis"))
text(mod.values$x[,1],
col=c(as.numeric(dat[train,"AFFECTED"])+10))
preds<-predict(mod, dat[test,])
preds$class
table(as.numeric(preds$class), as.numeric(dat[test, "AFFECTED"]) )
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
preds<-predict(mod, dat[test,])
preds$class
table(as.numeric(preds$class), as.numeric(dat[test, "AFFECTED"]) )
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
plot(roc_lda, color = red)
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
plot(roc_lda, col = "red"")
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
plot(roc_lda, col = "red")
library("pROC")
roc_lda <- plot.roc(as.numeric(preds$class),
as.numeric(dat[test, "AFFECTED"]) )
plot(roc_lda, col = "red")
library("caret")
library("e1071")
#
# Run algorithms using 10-fold cross validation
#
control <- trainControl(method="cv", number=10)
metric <- "Accuracy"
fit.lda <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda, RF=fit.rf))
summary(results)
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 10 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
fit.lda.2 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.2 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.2, RF=fit.rf.2))
ggplot(results) + labs(y = "Accuracy")
library("caret")
library("e1071")
#
# Run algorithms using 10-fold cross validation
#
control <- trainControl(method="cv", number=10)
metric <- "Accuracy" # use it as metric to evaluate the performance
fit.lda <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf <- train(AFFECTED~., data=dat, method="rf", # use random forest
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda, RF=fit.rf))
summary(results)
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 10 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
fit.lda.2 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.2 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.2, RF=fit.rf.2))
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 5 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
fit.lda.2 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.2 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.2, RF=fit.rf.2))
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 10 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
fit.lda.2 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.2 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.2, RF=fit.rf.2))
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 5 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
fit.lda.3 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.3 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.3, RF=fit.rf.3))
ggplot(results) + labs(y = "Accuracy")
#
# Run algorithms using 10-fold cross validation, 5 times
#
control <- trainControl(method = "repeatedcv", number = 10, repeats = 5)
fit.lda.3 <- train(AFFECTED~., data=dat, method="lda",
metric=metric, trControl=control)
fit.rf.3 <- train(AFFECTED~., data=dat, method="rf",
metric=metric, trControl=control)
results <- resamples(list(LDA=fit.lda.3, RF=fit.rf.3))
ggplot(results) + labs(y = "Accuracy")
knitr::opts_chunk$set(warning=FALSE,message=FALSE,
tidy.opts=list(width.cutoff = 80),
tidy = TRUE)
library(ISLR)
library(ISLR2)
data(Default, package = "ISLR2")
dataf <- as.data.frame(Default)
### MODEL 1 =====================================
fit1 <- glm(default ~ income + balance, family = binomial, data = dataf)
summary(fit1)
data(Default, package = "ISLR2")
dataf <- as.data.frame(Default)
set.seed(1)
x <- rnorm(100)
y <- x - 2 * xˆ2 + rnorm(100)
set.seed(1)
x <- rnorm(100)
y <- x - 2 * x^2 + rnorm(100)
set.seed(1)
x <- rnorm(100)
y <- x - 2 * x^2 + rnorm(100)
plot(x, y)
install.packages("glmnet")
setwd("~/Documents/Repo_Git/SL_homeworks/Homework2")
library(ggplot2)
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
tidy.opts=list(width.cutoff = 80),
tidy = TRUE,
fig.width = unit(3, "cm"),
fig.height = unit(2, "cm"),
fig.align = "center"
)
library(tidyverse)
library(tidymodels)
library(caret)
library(e1071) # Naive Bayes
library(caret)
library(pROC)
library(gridExtra)
# Set working directory
setwd("~/Documents/Repo_Git/SL_homeworks/Homework2")
df <- read.csv('./prostate.csv')
summary(df)
any(is.na(df))
library(ggplot2)
knitr::opts_chunk$set(warning=FALSE,
message=FALSE,
tidy.opts=list(width.cutoff = 80),
tidy = TRUE,
fig.width = unit(3, "cm"),
fig.height = unit(2, "cm"),
fig.align = "center"
)
library(tidyverse)
library(tidymodels)
library(caret)
library(e1071) # Naive Bayes
library(pROC)
library(gridExtra)
library(tree)
library(randomForest)
library(gbm)
library(ggplot2)
library(vip)
library(pracma)
# Set working directory
setwd("~/Documents/Repo_Git/SL_homeworks/Homework2")
dim(prostate_df)
dim(df)
dim(df)
set.seed(1)
dim(df)
# show the dataset
knitr::kable(head(df))
dim(df)
# show the dataset
kable(head(df))
dim(df)
# show the dataset
table(head(df))
dim(df)
# show the dataset
head(df)
